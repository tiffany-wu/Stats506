---
title: "Problem Set 4"
author: "Tiffany Wu"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
output: html_document
editor: source
mainfont: Times New Roman
---

## Github Repo Link to Problem Set 4:
[https://github.com/tiffany-wu/Stats506/tree/main/PS4](https://github.com/tiffany-wu/Stats506/tree/main/PS4) 

## Problem 1 - Tidyverse

Use the tidyverse for this problem. In particular, use piping and dplyr as much as you are able. Note: Use of any deprecated functions will result in a point loss.

Install and load the package nycflights13.

```{r}
rm(list=ls()) 

# Load necessary libraries
library(tidyverse)
library(nycflights13)

# Get flights df into environment (for some reason, it won't do it automatically after loading library)
flights <- flights
airports <- airports
```


### a. Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

### Additionally,

* Order both tables in descending mean delay.
* Both tables should use the airport names not the airport codes.
* Both tables should print all rows.

```{r}
# Look at the data w/i nycflights13 -- commented out for html render for easier grading
# view(flights)
# summary(flights)

# Count unique origin and destination airport names to get feeling of what table should look like
unique(flights$origin)
length(unique(flights$dest))

# Departure delay table
dep_delay <- flights %>%
  group_by(origin) %>%
  summarize(
    mean_dep_delay = mean(dep_delay, na.rm = TRUE),
    median_dep_delay = median(dep_delay, na.rm = TRUE)
  ) %>%
  left_join(airports, by = c("origin" = "faa")) %>%
  select("Airport Name" = name, "Mean Departure Delay" = mean_dep_delay, "Median Departure Delay" = median_dep_delay) %>%
  arrange(desc("Mean Departure Delay")) %>%
  print(n = Inf)

# Arrival delay table
arrival_delay <- flights %>%
  group_by(dest) %>%
  filter(n() >= 10) %>% # exclude any destination with under 10 flights
  summarize(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    median_arr_delay = median(arr_delay, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  left_join(airports, by = c("dest" = "faa")) %>%
  # Some of the airport joins produce an NA? Manually look up the 4 airport names that weren't joined on Google and input them.
  mutate(name = case_when(dest == "PSE" ~ "Mercedita International Airport",
                          dest == "SJU" ~ "Luis Munoz Marin International Airport",
                          dest == "STT" ~ "Cyril E. King Airport",
                          dest == "BQN" ~ "Aeropuerto Internacional Rafael Hernández",
                          TRUE ~ name)) %>%
  arrange(desc(mean_arr_delay)) %>%
  select("Airport Name" = name, "Mean Arrival Delay" = mean_arr_delay, "Median Arrival Delay" = median_arr_delay) %>%
  print(n = Inf)  # Print all rows

```

### How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entires for the model, average speed (in MPH) and number of flights.

Aircraft model 777-222 has the fastest average speed and made 1 flight.

```{r}
# Check planes df, commented out for easier grading
# summary(planes)
planes <- planes # to get into environment

# Make df of the fastest aircraft models
fastest_aircraft <- flights %>%
  # Calculate speed in MPH
  mutate(speed = distance / (air_time / 60)) %>%  
  group_by(tailnum) %>%
  summarize(
    # Average speed per aircraft
    avg_speed = mean(speed, na.rm = TRUE), 
    # Number of flights for the aircraft
    n_flights = n()  
  ) %>%
  ungroup() %>%
  arrange(desc(avg_speed)) %>%
  # Select the aircraft with the highest average speed
  slice(1) %>%  
  # Get the aircraft model from the planes dataset
  left_join(planes, by = "tailnum") %>%  
  select("Model" = model, "Average Speed" = avg_speed, "Number of Flights" = n_flights)  # Select the relevant columns

fastest_aircraft
```


## Problem 2 - get_temp()

Use the tidyverse for this problem. In particular, use piping and dplyr as much as you are able. Note: Use of any deprecated functions will result in a point loss.

Load the Chicago NNMAPS data we used in the visualization lectures. Write a function get_temp() that allows a user to request the average temperature for a given month. The arguments should be:

* month: Month, either a numeric 1-12 or a string.
* year: A numeric year.
* data: The data set to obtain data from.
* celsius: Logically indicating whther the results should be in celsius. Default FALSE.
* average_fn: A function with which to compute the mean. Default is mean.

The output should be a numeric vector of length 1. The code inside the function should, as with the rest of this problem, use the tidyverse. Be sure to sanitize the input.

Prove your code works by evaluating the following. Your code should produce the result, or a reasonable error message.


```{r, error = TRUE}
# Read in nnmaps
nnmaps <- read_csv("chicago-nmmaps.csv")

# Define the function to get the average temperature

#' Get the average temperature for a given month and year
#'
#' This function computes the average temperature for a specified month and year from a given dataset.
#' Users can specify the format of the month (numeric or string), and whether the temperature should be 
#' reported in Celsius or Fahrenheit. It also allows custom averaging functions.
#'
#' @param month_input Either a numeric value (1-12) or a string representing the month (e.g., "Jan", "April").
#' @param year_input A numeric value representing the year.
#' @param data A data frame containing temperature data, with columns for `year`, `month`, and `temp`.
#' @param celsius A logical value indicating whether the temperature should be returned in Celsius. Default is FALSE (Fahrenheit).
#' @param average_fn A function used to compute the average. Default is `mean`. Custom functions can be provided.
#'
#' @return A numeric vector of length 1 representing the average temperature for the given month and year.
#' If `celsius = TRUE`, the temperature is returned in Celsius; otherwise, it is returned in Fahrenheit.
#' 
#' @examples
#' get_temp("Apr", 1999, data = nnmaps)
#' 
get_temp <- function(month_input, year_input, data, celsius = FALSE, average_fn = mean) {
  
   # Check if the input month is a valid number (1-12) or a valid month string
  
   # If the input is numeric, check if it falls between 1 and 12 and convert it to the 3-letter abbreviation
  if (is.numeric(month_input)) {
    if (month_input %in% 1:12) {
      month_input <- month.abb[month_input]  # Convert numeric month to abbreviation
    } else {
      stop("Invalid month: Please provide a month number between 1 and 12.")
    }
  }
  
    # Now do characters
    # ChatGPT: setNames(1:12, month.abb) pairs the numeric vector (1–12) with the month abbreviations as names. It creates a named vector where the names (keys) are the month abbreviations, and the values are the corresponding numbers:
  
 # If the input month is a string, ensure it is a valid 3-letter abbreviation
  if (is.character(month_input)) {
    # Convert the first 3 letters of the input to lowercase
    sanitized_month <- tolower(substr(month_input, 1, 3))
    
    # Match the sanitized input to the valid month abbreviations
    month_index <- match(sanitized_month, tolower(month.abb))
    
    # If the month is valid (not NA), convert it to the correct format with the first letter capitalized
    if (!is.na(month_index)) {
      month_input <- month.abb[month_index]  # This will return "Jan", "Feb", "Oct", etc.
    } else {
      stop("Invalid month: Please provide a valid month string (e.g., 'Jan').")
    }
  }

  # Check if the year exists in the dataset
  if (!year_input %in% data$year) {
    stop("Invalid year: Year not found in the dataset.")
  }

  # Filter the data for the requested month and year
  filtered_data <- data %>%
    filter(year == year_input, 
           month == month_input)
  
  # If no data is available for that month and year, throw an error
  if (nrow(filtered_data) == 0) {
    stop("No data available for the requested month and year.")
  }
  
  # Calculate the average temperature
  avg_temp <- filtered_data %>%
    summarize(average_temp = average_fn(temp)) %>%
    pull(average_temp)
  
  # Convert to Celsius if requested
  if (celsius) {
    avg_temp <- (avg_temp - 32) * 5 / 9
  }
  
  return(avg_temp)
}

# Test examples

# Example 1: April 1999 in Fahrenheit
get_temp("Apr", 1999, data = nnmaps)

# Check using Tidyverse
check <- nnmaps %>%
  group_by(month, year) %>%
  mutate(avg_temp = mean(temp)) %>%
  filter(month == "Apr",
         year == 1999) %>%
  distinct(avg_temp)
check

# Example 2: April 1999 in Celsius
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)

# Example 3: October 1998 using median function
get_temp(10, 1998, data = nnmaps, average_fn = median)

# Example 4: Invalid month (13)
get_temp(13, 1998, data = nnmaps)

# Example 5: February 2005 in Fahrenheit
get_temp(2, 2005, data = nnmaps)

# Example 6: November 1999 with a custom average function, in Celsius
get_temp("November", 1999, data = nnmaps, celsius = TRUE, 
         average_fn = function(x) {
           x <- sort(x)
           mean(x[2:(length(x) - 1)])  # Trimmed mean
         })

```

## Problem 3 - Visualization

Note: This is, intentionally, a very open-ended question. There is no “right” answer. The goal is for you to explore your plotting options, and settle on something reasonable. You can use base R, ggplot, or soemthing else. You’ll likely have to look online for resources on plotting beyond what we covered in class.

This dataset lists characteristics of art sales. Download the file named “df_for_ml_improved_new_market” (NOT the “df_for_ml_improved_new_market_1” version!). For each of the following, produce a publication-ready plot which demonstrates the answer to the question. Use your plot to support an argument for your question.

```{r}
# Load art sales df
art <- read.csv("df_for_ml_improved_new_market.csv")

# Get a sense of what it is first, commented out for grading
# psych::describe(art)
```

### a. Is there a change in the sales price in USD over time?

There does seem to be a change in sales prices in USD over time. Below is a line plot showing the mean and median USD prices from 1997-2012. From the mean average line, we see a big change from under 10000 dollars in 1997 to over 40000 dollars at the peak of 2008, down to about 30000 dollars from 2009-2012. This is a 20000-30000 change in the average price. Of course, the mean is highly influenced by outliers, so this tells us there are likely more really rare, highly expensive art being sold in more recent years, or the value of certain art pieces being sold got a lot higher due to certain events (e.g., a really rich art connoisseur willing to pay a lot for a Van Gogh, etc.) 

The median shows a less drastic change, from an average of around 5000 dollars around 1997 to an average of about 11000 dollars from 2009-2012. This is still a rise (more than a doubling) of the average sales price over time, just less dramatic than the change we see when looking at the mean.

```{r}
# Art summary -- get mean and median USD prices per year
art_summary <- art %>%
  group_by(year) %>%
  summarize(
    mean_price = mean(price_usd, na.rm = TRUE),
    median_price = median(price_usd, na.rm = TRUE)
  )

# Plot median and mean sales prices over time
ggplot(art_summary, aes(x = year)) +
  geom_line(aes(y = mean_price, color = "Mean"), linewidth = 1) +  # Line for mean sales price
  geom_line(aes(y = median_price, color = "Median"), linewidth = 1, linetype = "dashed") +  # Line for median sales price
  scale_x_continuous(breaks = seq(min(art_summary$year), max(art_summary$year), by = 2)) +  # 2-year increments
  labs(
    title = "Median and Mean Sales Prices in USD from 1997-2012",
    x = "Year",
    y = "Sales Price (USD)",
    color = "Average Calculation"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    text = element_text(size = 12),
    legend.position = "bottom"
  )
```


### b. Does the distribution of genre of sales across years appear to change?

Overall, as seen in the bar graph, more art of all genres seems to be getting sold as the years progress. However, from 1997-1999, it seemed like the genre of sales were all close to each other--one genre did not sell more than the others since not a lot of art was getting sold in general. From 1999-2012, we see a separation of the genres, where photography and sculpture genres sell much more than print, painting, and other genres (note that if a work of art qualified as more than 1 genre, we included them in their independent genres along with a category called "Two+ Genres"). This gap between the photography/sculpture genres and other genres widens from 1999-2012 as well, as emphasized by the line graph below meant to complement the bar graph for this question.

```{r, warning = FALSE}
# Get year and genre columns
genre <- art %>%
  dplyr::select(year, starts_with("Genre")) %>%
  # Get rid of the Genre___ start so we can just use the genre name for plot
  rename_with(~ gsub("Genre___", "", .), starts_with("Genre___")) %>%
  mutate(two_plus = rowSums(select(., Photography, Print, Sculpture, Painting, Others), na.rm = TRUE)) %>%
  mutate("Two+ Genres" = ifelse(two_plus > 1, 1, 0)) %>%
  select(-two_plus)

# Go from wide to long
genre_long <- genre %>%
  pivot_longer(
    cols = -year,  # Exclude the 'year' column from pivoting
    names_to = "genre",  
    values_to = "count" 
  )

# Get counts for each genre for each year
genre_summary <- genre_long %>%
  group_by(year, genre) %>%
  summarize(total_sales = sum(count, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(genre = factor(genre, levels = c("Photography", "Print", "Sculpture", "Painting", "Others", "Two+ Genres")))


# Factor so the bars will be ordered in ggplot
genre_summary2 <- genre_summary %>%
  group_by(year) %>%
  mutate(genre = fct_reorder(genre, total_sales)) %>%
  ungroup()

# Plot the distribution of genres across years using a stacked bar plot
ggplot(genre_summary2, aes(x = year, y = total_sales, fill = genre)) +
  geom_bar(stat = "identity", position = "stack") +  
  scale_x_continuous(breaks = seq(min(genre_summary$year), max(genre_summary$year), by = 2)) +  # 2-year increments
  labs(
    title = "Distribution of Genre of Sales Across Years",
    x = "Year",
    y = "Total Sales",
    fill = "Genre"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    text = element_text(size = 12),
    legend.position = "bottom"
  )

# Plot the distribution of genres across years using a line plot
ggplot(genre_summary, aes(x = year, y = total_sales, color = genre)) +
  geom_line(size = 1) +  # Line plot for each genre
  scale_x_continuous(breaks = seq(min(art_summary$year), max(art_summary$year), by = 2)) +  # 2-year increments
  labs(
    title = "Genre of Sales Across Years",
    x = "Year",
    y = "Total Sales",
    color = "Genre"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    text = element_text(size = 12),
    legend.position = "bottom"
  )



```


### c. How does the genre affect the change in sales price over time?

Photography art sales seem to sell for the highest prices, especially in years closest to 2012-- they have the biggest increase in mean and median art sale prices and the biggest increase in sales price over time, as seen in the graphs below. This is followed by print sales, which seem to oscillate a lot more, painting, and sculpture. The latter three have a mean price of around 20000 dollars in 2012 while photography's mean is over 40000 dollars. (Note that if a work of art included two or more genres, usually with the second genre being "Other", we used the artwork's primary genre.)

```{r}
# Get df for year, genre, and prices
sales_summary <- art %>%
  dplyr::select(year, price_usd, starts_with("Genre")) %>%
  # Get rid of the Genre___ start so we can just use the genre name for plot
  rename_with(~ gsub("Genre___", "", .), starts_with("Genre___")) %>%
  mutate(genre = case_when(Photography == 1 ~ "Photography",
                           Print == 1 ~ "Print",
                           Sculpture == 1 ~ "Sculpture",
                           Painting == 1 ~ "Painting",
                           Others == 1 ~ "Other")) %>%
  group_by(year, genre) %>%
  summarize(
    mean_price = mean(price_usd, na.rm = TRUE),
    median_price = median(price_usd, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(genre = factor(genre, levels = c("Photography", "Print", "Sculpture", "Painting", "Other")))

# Mean price plot
ggplot(sales_summary, aes(x = year, y = mean_price, color = genre)) +
  geom_line(size = 1) + 
  labs(
    title = "Mean Sales Price Over Time by Genre",
    x = "Year",
    y = "Mean Sales Price (USD)",
    color = "Genre"  # Legend title for genre colors
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    text = element_text(size = 12),
    legend.position = "bottom"  # Place the legend at the bottom
  )

# Median price plot
ggplot(sales_summary, aes(x = year, y = median_price, color = genre)) +
  geom_line(size = 1) + 
  labs(
    title = "Median Sales Price Over Time by Genre",
    x = "Year",
    y = "Median Sales Price (USD)",
    color = "Genre"  # Legend title for genre colors
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    text = element_text(size = 12),
    legend.position = "bottom"  # Place the legend at the bottom
  )

```


